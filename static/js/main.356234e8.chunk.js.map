{"version":3,"sources":["CustomModal.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["CustomModal","props","Modal","aria-labelledby","centered","status","count","Alert","variant","Heading","Form","useState","pincode","setPincode","Date","date","setDate","email","setEmail","setStatus","modalShow","setModalShow","useEffect","a","fetch","encodeURIComponent","changeDateFormat","response","json","fetchSlots","formatDate","dd","getDate","mm","getMonth","yyyy","getFullYear","className","onSubmit","e","preventDefault","console","log","htmlFor","id","type","placeholder","required","minLength","value","onChange","target","data-toggle","data-target","show","onHide","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.356234e8.chunk.js","sourcesContent":["import { Modal, Alert } from 'react-bootstrap'\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport { React } from 'react'\r\n\r\nexport default function CustomModal(props) {\r\n\r\n    return(\r\n    <div>\r\n       <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\" centered>        \r\n          {\r\n            props.status === \"\" &&\r\n            <Skeleton count={4}/>\r\n          }\r\n        {\r\n          props.status === \"Already registered!\" &&\r\n          <Alert variant=\"warning\">\r\n            <Alert.Heading>Oops!</Alert.Heading>\r\n            <p>\r\n              Looks like you've already submitted your details.\r\n              Please change your pincode or email and submit again. Thanks!\r\n            </p>\r\n          </Alert>\r\n              \r\n        }\r\n        {\r\n          props.status === \"No slots available!\" &&\r\n          <Alert variant=\"success\">\r\n            <Alert.Heading>Hey, Thanks for submitting!</Alert.Heading>\r\n            <p>\r\n              Looks like there is no slots available currently.\r\n              We'll send you email notification as soon as slots get available. Thanks!\r\n            </p>\r\n          </Alert>\r\n              \r\n        }\r\n        {\r\n          props.status === \"Ok\" &&\r\n          <Alert variant=\"success\">\r\n            <Alert.Heading>Hey, Thanks for submitting!</Alert.Heading>\r\n            <p>\r\n              Slots are available now!\r\n              We've send you the details in email. Please go check and take your dose. Thanks!\r\n            </p>\r\n          </Alert>\r\n              \r\n        }\r\n      </Modal>\r\n    </div>\r\n  );\r\n    \r\n}","import { React, useEffect, useState } from 'react'\r\nimport CustomModal from './CustomModal';\r\n\r\nexport default function Form() {\r\n      \r\n   const [pincode, setPincode] = useState(\"\")\r\n   const [date, setDate] = useState(new Date())\r\n   const [email, setEmail] = useState(\"\")\r\n   const [status, setStatus] = useState(\"\")\r\n   const [modalShow, setModalShow] = useState();\r\n\r\n\r\n   useEffect(() => {\r\n    if (pincode != \"\" || email != \"\") {\r\n       async function fetchSlots() {\r\n        const response = await fetch(`/findslots?pincode=${encodeURIComponent(pincode)}&date=${encodeURIComponent(changeDateFormat(date))}&sendTo=${encodeURIComponent(email)}`)\r\n        const json = await response.json()\r\n        setStatus(json.status)\r\n       }\r\n       fetchSlots()\r\n    } \r\n   }, [modalShow])\r\n\r\n   const submit = e => {\r\n        e.preventDefault()\r\n        console.log(status)\r\n        setModalShow(true)\r\n   }\r\n\r\n   const resetFields = () => {\r\n    setEmail(\"\")\r\n    setPincode(\"\")\r\n    setDate(new Date())\r\n    setModalShow(false)\r\n    setStatus(\"\")\r\n   }\r\n\r\n   const changeDateFormat = (formatDate) => {\r\n         var dd = formatDate.getDate();\r\n          var mm = formatDate.getMonth() + 1;\r\n\r\n          var yyyy = formatDate.getFullYear();\r\n          if (dd < 10) {\r\n              dd = '0' + dd;\r\n          }\r\n          if (mm < 10) {\r\n              mm = '0' + mm;\r\n          }\r\n          var formatDate = dd + '-' + mm + '-' + yyyy;\r\n          return formatDate\r\n   }\r\n\r\n  return(\r\n        <div className=\"container-md\">\r\n            <form onSubmit={submit}>\r\n                \r\n                <div className=\"row mb-2\">\r\n                    <label htmlFor=\"pincode\" className=\"col-form-label\">Pincode</label>\r\n                    <div className=\"col-sm\">\r\n                      <input\r\n                          id=\"pincode\"\r\n                          type=\"text\"\r\n                          className=\"form-control-sm\"\r\n                          placeholder=\"Please enter your pincode\"\r\n                          required\r\n                          minLength=\"6\"\r\n                          value={pincode}\r\n                          onChange={e => setPincode(e.target.value)}\r\n                      />\r\n                    </div>                    \r\n                </div>   \r\n\r\n                <div className=\"row mb-2\">\r\n                    <label htmlFor=\"email\" className=\"col-form-label\">Email address</label>\r\n                    <div>\r\n                    <input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        className=\"form-control-sm\"\r\n                        placeholder=\"Please enter your email\"\r\n                        required                    \r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    </div>\r\n                </div>\r\n\r\n              <div className=\"submit\">\r\n                  \r\n                 <button type=\"submit\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModalCenter\">Submit</button> \r\n\r\n              </div>\r\n               <CustomModal show={modalShow}\r\n                            status={status}\r\n                            onHide={() => resetFields()} />\r\n            </form>\r\n        </div>\r\n  )\r\n}\r\n\r\n","import './App.css';\nimport Form from './Form'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App vertical-center\">\n      \n\n      <div className=\"container\" >\n        <div className=\"header\">\n          <h1 >\n            Welcome to <a href=\"https://covvaccine.com\">Covvaccine!</a>\n          </h1> \n        </div>\n        <div>\n          <Form />  \n          </div>       \n        <div className=\"footer\">\n          <p>\n            Developed by Digambar @2021  \n          </p>\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}